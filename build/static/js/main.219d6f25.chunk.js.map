{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","clasName","id","class","this","props","account","Component","Main","_this","role","style","maxWidth","onSubmit","event","preventDefault","content","postContent","value","createPost","type","ref","input","placeholder","required","posts","map","post","key","author","window","web3","utils","fromWei","tipAmount","toString","name","onClick","toWei","tipPost","target","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","socialNetwork","postCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","net","getId","networkId","networkData","SocialNetwork","networks","Contract","abi","address","methods","i","concat","toConsumableArray","sort","b","_this2","send","from","once","receipt","_this3","components_Navbar","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.219d6f25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n        // <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        //   <a\r\n        //     className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n        //     href=\"http://www.google.com\"\r\n        //     target=\"_blank\"\r\n        //     rel=\"nooperner noreferrer\"\r\n        //   >\r\n        //   Luke Roznovsky\r\n        //   </a>\r\n\r\n        <nav className=\"navbar-expand-sm bg-light\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <a href=\"htpps://lukeroz.github.io\" clasName=\"nav-link\">QuickFlow</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a href=\"htpps://lukeroz.github.io\" className=\"nav-link\">Introduction</a>\r\n            </li>\r\n            <li className=\"nav-item ml-auto\">\r\n              <p id=\"account\" class=\"accountName\">{this.props.account}</p>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const content = this.postContent.value\r\n                this.props.createPost(content)\r\n              }}>\r\n                  <div className = \"form-group mr-sm-2\">\r\n                    <input\r\n                      id=\"postContent\"\r\n                      type=\"text\"\r\n                      ref={(input) => { this.postContent = input }}\r\n                      className=\"form-control\"\r\n                      placeholder=\"What's on your mind?\"\r\n                      required />\r\n                </div>\r\n              <button type=\"submit\" className = \"btn btn-primary btn-block\" id=\"shareButton\">Share</button>\r\n              </form>\r\n              {this.props.posts.map((post, key) => {\r\n                return(\r\n                  <div className=\"card mb-4\" key={key}>\r\n                    <div className=\"card-header\">\r\n                      <small className=\"text-muted\">{post.author}</small>\r\n                    </div>\r\n                    <ul id=\"postList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p>{post.content}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS: {window.web3.utils.fromWei(post.tipAmount.toString(), 'Ether')}\r\n                        </small>\r\n                        <button className=\"btn btn-link btn-sm float-right pt-0\" name={post.id} onClick={(event) => {\r\n                          let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\r\n                          this.props.tipPost(event.target.name, tipAmount)\r\n                        }}>\r\n                        TIP 0.1 ETH\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport SocialNetwork from '../abis/SocialNetwork.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\n//Main javascript file\r\n//\"React is a component based library that allows us to write\r\n//javascript in these reusuable components.\"\r\n//Mixes javascript with HTML code\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  //Looks for Ethereum provider inside your window. If there is none,\r\n  //It will create one!\r\n  async loadWeb3() {\r\n    if (window.ethereum){\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    //Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    console.log(accounts)\r\n    this.setState({account: accounts[0]})\r\n    //Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = SocialNetwork.networks[networkId]\r\n    if (networkData) {\r\n      //Take all the info we have...\r\n      const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\r\n      this.setState({ socialNetwork: socialNetwork })\r\n      const postCount = await socialNetwork.methods.postCount().call()\r\n      this.setState({ postCount: postCount})\r\n      //Load posts\r\n      for(var i = 1; i<=postCount; i++){\r\n        const post = await socialNetwork.methods.posts(i).call()\r\n        this.setState({\r\n          posts: [...this.state.posts, post] //Creates a new array, adds post to end of that array\r\n        })\r\n      }\r\n      //Sort posts and show highest tipped posts\r\n      this.setState({\r\n        posts:this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount)\r\n      })\r\n      this.setState({loading: false})\r\n    } //This will tell us what the address is\r\n\r\n    else{\r\n      window.alert('SocialNetwork contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n/* const MyContract = web3.eth.contract([\r\n//\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n//\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"id\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"content\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tipAmount\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"address payable\",\r\n\t\t\t\t\"name\": \"author\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"PostCreated\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n//\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"id\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"content\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tipAmount\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"address payable\",\r\n\t\t\t\t\"name\": \"author\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"PostTipped\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n//\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_content\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"createPost\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n//\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"name\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n//\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"postCount\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n//\t{\r\n\t\t\"constant\": true,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"posts\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"id\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"content\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tipAmount\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address payable\",\r\n\t\t\t\t\"name\": \"author\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"payable\": false,\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n//\t{\r\n\t\t\"constant\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_id\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"tipPost\",\r\n\t\t\"outputs\": [],\r\n\t\t\"payable\": true,\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n//])*/\r\n\r\n  createPost(content){\r\n    this.setState( { loading: true })\r\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  tipPost(id, tipAmount){\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  //Props are properties for the componenet\r\n  constructor(props) {\r\n    super(props) //Properties\r\n    this.state = {\r\n      account: '',\r\n      socialNetwork:null,\r\n      postCount: 0,\r\n      posts: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createPost = this.createPost.bind(this)\r\n    this.tipPost = this.tipPost.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account}/>\r\n        {this.state.loading\r\n          ? <div id=\"loaded\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              posts={this.state.posts}\r\n              createPost={this.createPost}\r\n              tipPost={this.tipPost}\r\n               />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}